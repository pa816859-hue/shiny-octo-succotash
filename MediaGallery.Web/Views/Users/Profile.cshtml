@model MediaGallery.Web.ViewModels.UserProfileViewModel
@using System.Collections.Generic
@using System.Linq
@using MediaGallery.Web.Controllers
@using MediaGallery.Web.Services.Models
@{
    ViewData["Title"] = $"Profile Â· {Model.User.DisplayName}";

    string? MediaUrl(string? path)
    {
        if (string.IsNullOrWhiteSpace(path))
        {
            return null;
        }

        var normalized = path.Replace("\\", "/").TrimStart('/');
        return Url.Content($"~/media/{normalized}");
    }

    var query = Context.Request.Query;
    var channelValue = query["channelId"].ToString();
    var hasChannel = long.TryParse(channelValue, out var channelId);
    var onlyMedia = string.Equals(query["mediaOnly"], "true", StringComparison.OrdinalIgnoreCase);
    var pageSizeValue = query["pageSize"].ToString();
    var hasPageSize = int.TryParse(pageSizeValue, out var pageSize);
    var sortRaw = query["sortOrder"].ToString();
    var sortOrder = Enum.TryParse<MessageSortOrder>(sortRaw, true, out var parsedSort)
        ? parsedSort
        : MessageSortOrder.NewestFirst;
    var pagination = Model.Pagination;
    var textMessages = Model.TextMessages;
    var photoMessages = Model.PhotoMessages;
    var videoMessages = Model.VideoMessages;

    var queryParameters = new Dictionary<string, object?>
    {
        ["channelId"] = hasChannel ? channelId : null,
        ["mediaOnly"] = onlyMedia ? true : null,
        ["sortOrder"] = sortOrder,
        ["pageSize"] = hasPageSize ? pageSize : pagination.PageSize
    };

    string BuildPageUrl(int pageNumber)
    {
        var parameters = new Dictionary<string, object?>
        {
            ["id"] = Model.User.UserId,
            ["page"] = pageNumber
        };

        foreach (var pair in queryParameters)
        {
            if (pair.Value is not null)
            {
                parameters[pair.Key] = pair.Value;
            }
        }

        return Url.Action("Profile", "Users", parameters) ?? string.Empty;
    }
}

<section class="page-header">
    <span class="page-header__eyebrow">Operative dossier</span>
    <h1>@Model.User.DisplayName</h1>
    <p class="lead">Collated posts, media drops, and tag weights for the selected user.</p>
</section>

<section class="user-profile" data-media-root="@Url.Content("~/media/")">
    <aside class="user-profile__panel">
        <div class="user-profile__identity">
            <h2>@(Model.User.Username ?? "Anonymous")</h2>
            <span class="user-profile__meta">User ID: <strong>@Model.User.UserId</strong></span>
            <span class="user-profile__meta">Last seen: @Model.User.LastUpdate.ToLocalTime().ToString("g")</span>
        </div>
        <div>
            <h3>Tags</h3>
            @if (!Model.User.Tags.Any())
            {
                <p class="user-profile__meta">No weighted tags available.</p>
            }
            else
            {
                <ul class="chip-list">
                    @foreach (var tag in Model.User.Tags.OrderByDescending(tag => tag.Weight).ThenBy(tag => tag.Tag))
                    {
                        <li><a class="tag-link" asp-controller="Tags" asp-action="Detail" asp-route-tag="@tag.Tag">@tag.Tag (@tag.Weight)</a></li>
                    }
                </ul>
            }
        </div>
        <form method="get" asp-action="Profile" asp-route-id="@Model.User.UserId" class="filter-form" aria-label="Filter user timeline">
            <div class="filter-field">
                <label for="channelId">Channel ID</label>
                <input type="number" id="channelId" name="channelId" value="@channelValue" placeholder="Any" min="1" />
            </div>
            <div class="filter-field">
                <label for="sortOrder">Sort order</label>
                <select id="sortOrder" name="sortOrder">
                    @if (sortOrder == MessageSortOrder.NewestFirst)
                    {
                        <option value="NewestFirst" selected>Newest first</option>
                    }
                    else
                    {
                        <option value="NewestFirst">Newest first</option>
                    }
                    @if (sortOrder == MessageSortOrder.OldestFirst)
                    {
                        <option value="OldestFirst" selected>Oldest first</option>
                    }
                    else
                    {
                        <option value="OldestFirst">Oldest first</option>
                    }
                </select>
            </div>
            <div class="filter-field">
                <label for="pageSize">Page size</label>
                <input type="number" id="pageSize" name="pageSize" value="@(hasPageSize ? pageSize : pagination.PageSize)" min="1" max="@PaginationHelper.MaxPageSizeLimit" />
            </div>
            <div class="filter-field">
                <label class="switch" for="mediaOnly">
                    <input type="checkbox" id="mediaOnly" name="mediaOnly" value="true" @(onlyMedia ? "checked" : null) />
                    <span>Only show messages with media</span>
                </label>
            </div>
            <div class="filter-actions">
                <button class="btn btn-primary" type="submit">Apply</button>
                <a class="btn btn-ghost" asp-action="Profile" asp-route-id="@Model.User.UserId">Reset</a>
            </div>
        </form>
    </aside>

    <div class="user-profile__content">
        <section class="user-profile__section" aria-labelledby="user-text-messages">
            <div class="user-profile__section-header">
                <h2 id="user-text-messages">Text transmissions</h2>
                <p>All text messages captured for this user.</p>
            </div>
            @if (!textMessages.Any())
            {
                <div class="empty-state">
                    <p>No text messages matched the selected filters for this user.</p>
                </div>
            }
            else
            {
                <div class="text-message-list">
                    @foreach (var message in textMessages)
                    {
                        <article class="media-card media-card--text" data-message-id="@message.MessageId" tabindex="0">
                            <header class="media-card__header">
                                <p class="media-card__title">Channel @message.ChannelId</p>
                                <span class="media-card__meta">@message.SentDate.ToLocalTime().ToString("g")</span>
                            </header>
                            <div class="media-card__body">
                                <p class="media-card__text">@message.MessageText</p>
                            </div>
                        </article>
                    }
                </div>
            }
        </section>

        <section class="user-profile__section" aria-labelledby="user-photo-gallery">
            <div class="user-profile__section-header">
                <h2 id="user-photo-gallery">Photo drops</h2>
                <p>Unique photo attachments sent by this user.</p>
            </div>
            @if (!photoMessages.Any())
            {
                <div class="empty-state">
                    <p>No photos matched the selected filters.</p>
                </div>
            }
            else
            {
                <div class="media-gallery-grid" data-gallery tabindex="0" aria-label="User photo gallery">
                    @foreach (var message in photoMessages)
                    {
                        var mediaPath = MediaUrl(message.PhotoPath);
                        if (mediaPath is null)
                        {
                            continue;
                        }

                        <article class="media-card" data-message-id="@message.MessageId" data-has-media="true" tabindex="0">
                            <header class="media-card__header">
                                <p class="media-card__title">Channel @message.ChannelId</p>
                                <span class="media-card__meta">@message.SentDate.ToLocalTime().ToString("g")</span>
                            </header>
                            <div class="media-card__body">
                                <div class="media-card__media" data-lg-item>
                                    <a href="@mediaPath" data-sub-html="<p>@(message.MessageText ?? string.Empty)</p>">
                                        <img src="@mediaPath" alt="Photo shared by @Model.User.DisplayName">
                                    </a>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(message.MessageText))
                                {
                                    <p class="media-card__text">@message.MessageText</p>
                                }
                            </div>
                        </article>
                    }
                </div>
            }
        </section>

        <section class="user-profile__section" aria-labelledby="user-video-gallery">
            <div class="user-profile__section-header">
                <h2 id="user-video-gallery">Video drops</h2>
                <p>Unique video attachments sent by this user.</p>
            </div>
            @if (!videoMessages.Any())
            {
                <div class="empty-state">
                    <p>No videos matched the selected filters.</p>
                </div>
            }
            else
            {
                <div class="media-gallery-grid" aria-label="User video gallery">
                    @foreach (var message in videoMessages)
                    {
                        var mediaPath = MediaUrl(message.VideoPath);
                        if (mediaPath is null)
                        {
                            continue;
                        }

                        <article class="media-card" data-message-id="@message.MessageId" data-has-media="true" tabindex="0">
                            <header class="media-card__header">
                                <p class="media-card__title">Channel @message.ChannelId</p>
                                <span class="media-card__meta">@message.SentDate.ToLocalTime().ToString("g")</span>
                            </header>
                            <div class="media-card__body">
                                <div class="media-card__media video-wrapper">
                                    <video class="media-card__video" controls playsinline>
                                        <source src="@mediaPath" type="video/mp4" />
                                    </video>
                                </div>
                                @if (!string.IsNullOrWhiteSpace(message.MessageText))
                                {
                                    <p class="media-card__text">@message.MessageText</p>
                                }
                            </div>
                        </article>
                    }
                </div>
            }
        </section>

        <div class="scroll-status">
            Showing page @pagination.PageNumber with up to @pagination.PageSize messages.
        </div>

        <nav class="pagination" aria-label="User message pagination">
            <span class="pagination__info">Page @pagination.PageNumber</span>
            <div class="pagination__actions">
                @if (pagination.HasPreviousPage)
                {
                    <a class="btn btn-outline" href="@BuildPageUrl(pagination.PageNumber - 1)">Previous</a>
                }
                else
                {
                    <button class="btn btn-outline" type="button" disabled>Previous</button>
                }

                @if (pagination.HasNextPage)
                {
                    <a class="btn btn-outline" href="@BuildPageUrl(pagination.PageNumber + 1)">Next</a>
                }
                else
                {
                    <button class="btn btn-outline" type="button" disabled>Next</button>
                }
            </div>
        </nav>
    </div>
</section>

@section Scripts {
    <script type="module" src="~/js/userProfile.js" asp-append-version="true"></script>
}
