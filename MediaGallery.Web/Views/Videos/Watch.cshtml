@model VideoWatchViewModel
@{
    ViewData["Title"] = "Watch";
}

<div class="video-watch">
    @if (!Model.HasVideo)
    {
        <div class="video-watch__empty">
            <h1 class="video-watch__title">No videos ready just yet</h1>
            <p class="video-watch__subtitle">Once new videos arrive you'll be able to swipe through them here.</p>
            <a class="btn btn-primary" asp-controller="Home" asp-action="Index">Return to dashboard</a>
        </div>
    }
    else
    {
        var video = Model.CurrentVideo!;
        <div class="video-stage" data-video-id="@video.VideoId" data-like-url="@Url.Action("Like", "Videos")" data-next-url="@Url.Action("Next", "Videos")">
            <div class="video-stage__player">
                <video id="videoPlayer" class="video-stage__video" src="@video.SourceUrl" playsinline autoplay loop muted controls></video>
            </div>
            <aside class="video-stage__actions" aria-label="Video actions">
                <button type="button" class="video-action video-action--like@(video.IsLiked ? " is-active" : string.Empty)" id="likeButton">
                    <span aria-hidden="true">‚ù§</span>
                    <span>Like</span>
                </button>
                <button type="button" class="video-action video-action--next" id="nextButton">
                    <span aria-hidden="true">‚è≠</span>
                    <span>Next</span>
                </button>
                <a class="video-action video-action--link" asp-action="Liked" asp-controller="Videos">
                    <span aria-hidden="true">‚ô•</span>
                    <span>Liked</span>
                </a>
                <a class="video-action video-action--link" asp-controller="Messages" asp-action="MediaChronology" asp-route-videoId="@video.VideoId">
                    <span aria-hidden="true">üïë</span>
                    <span>Chronology</span>
                </a>
            </aside>
        </div>
        <div class="video-stage__meta">
            <p class="video-stage__id">Video #@video.VideoId</p>
            <p class="video-stage__timestamp">Added @video.AddedOn.ToString("g")</p>
        </div>
    }
</div>

<form id="videoActionsForm" method="post">
    @Html.AntiForgeryToken()
</form>

@section Scripts {
    <script>
        (() => {
            const stage = document.querySelector('.video-stage');
            if (!stage) {
                return;
            }

            const videoElement = document.getElementById('videoPlayer');
            const likeButton = document.getElementById('likeButton');
            const nextButton = document.getElementById('nextButton');
            const statusBanner = document.createElement('div');
            statusBanner.className = 'video-stage__status';
            statusBanner.hidden = true;
            stage.appendChild(statusBanner);
            let dismissHandle = null;

            const tokenInput = document.querySelector('#videoActionsForm input[name="__RequestVerificationToken"]');
            const antiForgeryToken = tokenInput ? tokenInput.value : '';

            const setStatus = (message, state) => {
                if (!statusBanner) {
                    return;
                }

                if (dismissHandle) {
                    window.clearTimeout(dismissHandle);
                    dismissHandle = null;
                }

                if (!message) {
                    statusBanner.hidden = true;
                    statusBanner.textContent = '';
                    statusBanner.dataset.state = '';
                    return;
                }

                statusBanner.hidden = false;
                statusBanner.textContent = message;
                statusBanner.dataset.state = state || '';

                dismissHandle = window.setTimeout(() => {
                    statusBanner.hidden = true;
                    statusBanner.textContent = '';
                    statusBanner.dataset.state = '';
                    dismissHandle = null;
                }, 2400);
            };

            const updateStage = (payload) => {
                if (!payload || !payload.hasVideo || !payload.video) {
                    stage.dataset.videoId = '';
                    setStatus('No more videos available right now.', 'empty');
                    if (videoElement) {
                        videoElement.pause();
                        videoElement.removeAttribute('src');
                        videoElement.load();
                    }
                    if (likeButton) {
                        likeButton.classList.remove('is-active');
                        likeButton.setAttribute('disabled', 'disabled');
                    }
                    if (nextButton) {
                        nextButton.setAttribute('disabled', 'disabled');
                    }
                    return;
                }

                const video = payload.video;
                stage.dataset.videoId = video.videoId;
                if (likeButton) {
                    likeButton.removeAttribute('disabled');
                }
                if (nextButton) {
                    nextButton.removeAttribute('disabled');
                }
                if (videoElement) {
                    videoElement.src = video.sourceUrl;
                    videoElement.load();
                    const playPromise = videoElement.play();
                    if (playPromise) {
                        playPromise.catch(() => { /* ignored */ });
                    }
                }

                if (likeButton) {
                    if (video.isLiked) {
                        likeButton.classList.add('is-active');
                    } else {
                        likeButton.classList.remove('is-active');
                    }
                }

                setStatus('', '');
            };

            const sendAction = async (url) => {
                if (!url) {
                    return;
                }

                const currentId = stage.dataset.videoId;
                if (!currentId) {
                    return;
                }

                try {
                    const response = await fetch(url, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': antiForgeryToken
                        },
                        body: JSON.stringify({ videoId: Number(currentId) })
                    });

                    if (!response.ok) {
                        setStatus('Something went wrong. Please try again.', 'error');
                        return;
                    }

                    const payload = await response.json();
                    updateStage(payload);
                } catch (error) {
                    console.error('Video action failed', error);
                    setStatus('Unable to contact the server.', 'error');
                }
            };

            likeButton?.addEventListener('click', () => sendAction(stage.dataset.likeUrl));
            nextButton?.addEventListener('click', () => sendAction(stage.dataset.nextUrl));
        })();
    </script>
}
